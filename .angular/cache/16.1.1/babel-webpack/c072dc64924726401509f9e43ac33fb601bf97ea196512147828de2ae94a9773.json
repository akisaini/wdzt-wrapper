{
  "ast": null,
  "code": "import { Pyramid } from '../pyramid';\nimport { switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/pyramid.service\";\nimport * as i2 from \"../wdzt/wdzt.directive\";\nclass PyramidViewerComponent {\n  constructor(pyramidService) {\n    this.pyramidService = pyramidService;\n    this.pyramid = new Pyramid();\n    this.manifest = null;\n  }\n  ngOnInit() {\n    this.getPyramid().subscribe(pyramid => {\n      this.pyramid = pyramid;\n      this.getManifest(pyramid);\n    }, error => {\n      console.log('pyramid error', error);\n    });\n  }\n  getPyramid() {\n    return this.pyramidId.pipe(switchMap(id => this.pyramidService.getById(id)));\n  }\n  getManifest(pyramid) {\n    this.pyramidService.getPyramidManifest(pyramid).subscribe(manifest => this.manifest = manifest);\n  }\n}\nPyramidViewerComponent.ɵfac = function PyramidViewerComponent_Factory(t) {\n  return new (t || PyramidViewerComponent)(i0.ɵɵdirectiveInject(i1.PyramidService));\n};\nPyramidViewerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PyramidViewerComponent,\n  selectors: [[\"app-pyramid-viewer\"]],\n  decls: 3,\n  vars: 1,\n  consts: [[3, \"manifest\"]],\n  template: function PyramidViewerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"b\");\n      i0.ɵɵtext(1, \"hello\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(2, \"wippWdzt\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"manifest\", ctx.manifest);\n    }\n  },\n  dependencies: [i2.WdztDirective],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { PyramidViewerComponent };",
  "map": {
    "version": 3,
    "names": [
      "Pyramid",
      "switchMap",
      "PyramidViewerComponent",
      "constructor",
      "pyramidService",
      "pyramid",
      "manifest",
      "ngOnInit",
      "getPyramid",
      "subscribe",
      "getManifest",
      "error",
      "console",
      "log",
      "pyramidId",
      "pipe",
      "id",
      "getById",
      "getPyramidManifest",
      "i0",
      "ɵɵdirectiveInject",
      "i1",
      "PyramidService",
      "selectors",
      "decls",
      "vars",
      "consts",
      "template",
      "PyramidViewerComponent_Template",
      "rf",
      "ctx",
      "ɵɵelementStart",
      "ɵɵtext",
      "ɵɵelementEnd",
      "ɵɵelement",
      "ɵɵadvance",
      "ɵɵproperty"
    ],
    "sources": [
      "/Users/akshat.saini/Documents/repo/wrap-app-main/src/app/pyramid-viewer/pyramid-viewer.component.ts",
      "/Users/akshat.saini/Documents/repo/wrap-app-main/src/app/pyramid-viewer/pyramid-viewer.component.html"
    ],
    "sourcesContent": [
      "import { Component, OnInit } from '@angular/core';\nimport { Pyramid } from '../pyramid';\nimport { Observable, forkJoin, map, switchMap } from 'rxjs';\nimport { PyramidService } from '../services/pyramid.service';\n\n@Component({\n  selector: 'app-pyramid-viewer',\n  templateUrl: './pyramid-viewer.component.html',\n  styleUrls: ['./pyramid-viewer.component.css']\n})\nexport class PyramidViewerComponent implements OnInit {\n  pyramid: Pyramid = new Pyramid();\n  manifest: any = null;\n  pyramidId!: Observable<string>;\n\n  constructor(private pyramidService: PyramidService) { }\n\n  ngOnInit() {\n    this.getPyramid()\n      .subscribe(pyramid => {\n        this.pyramid = pyramid;\n        this.getManifest(pyramid);\n      }, error => {\n        console.log('pyramid error', error);\n      });\n  }\n\n  getPyramid() {\n    return this.pyramidId.pipe(\n      switchMap(id => this.pyramidService.getById(id))\n    );\n  }\n\n  getManifest(pyramid: Pyramid) {\n    this.pyramidService.getPyramidManifest(pyramid).subscribe((manifest: any) => this.manifest = manifest);\n  }\n\n}\n",
      "<b>hello</b>\n<wippWdzt [manifest]=\"manifest\"></wippWdzt>"
    ],
    "mappings": "AACA,SAASA,OAAO,QAAQ,YAAY;AACpC,SAAoCC,SAAS,QAAQ,MAAM;;;;AAG3D,MAKaC,sBAAsB;EAKjCC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;IAJlC,KAAAC,OAAO,GAAY,IAAIL,OAAO,EAAE;IAChC,KAAAM,QAAQ,GAAQ,IAAI;EAGkC;EAEtDC,QAAQA,CAAA;IACN,IAAI,CAACC,UAAU,EAAE,CACdC,SAAS,CAACJ,OAAO,IAAG;MACnB,IAAI,CAACA,OAAO,GAAGA,OAAO;MACtB,IAAI,CAACK,WAAW,CAACL,OAAO,CAAC;IAC3B,CAAC,EAAEM,KAAK,IAAG;MACTC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,KAAK,CAAC;IACrC,CAAC,CAAC;EACN;EAEAH,UAAUA,CAAA;IACR,OAAO,IAAI,CAACM,SAAS,CAACC,IAAI,CACxBd,SAAS,CAACe,EAAE,IAAI,IAAI,CAACZ,cAAc,CAACa,OAAO,CAACD,EAAE,CAAC,CAAC,CACjD;EACH;EAEAN,WAAWA,CAACL,OAAgB;IAC1B,IAAI,CAACD,cAAc,CAACc,kBAAkB,CAACb,OAAO,CAAC,CAACI,SAAS,CAAEH,QAAa,IAAK,IAAI,CAACA,QAAQ,GAAGA,QAAQ,CAAC;EACxG;;AAzBWJ,sBAAsB,C;mBAAtBA,sBAAsB,EAAAiB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,cAAA;AAAA;AAAtBpB,sBAAsB,C;QAAtBA,sBAAsB;EAAAqB,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,gCAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCVnCV,EAAA,CAAAY,cAAA,QAAG;MAAAZ,EAAA,CAAAa,MAAA,YAAK;MAAAb,EAAA,CAAAc,YAAA,EAAI;MACZd,EAAA,CAAAe,SAAA,kBAA2C;;;MAAjCf,EAAA,CAAAgB,SAAA,GAAqB;MAArBhB,EAAA,CAAAiB,UAAA,aAAAN,GAAA,CAAAxB,QAAA,CAAqB;;;;;;SDSlBJ,sBAAsB"
  },
  "metadata": {},
  "sourceType": "module",
  "externalDependencies": []
}
