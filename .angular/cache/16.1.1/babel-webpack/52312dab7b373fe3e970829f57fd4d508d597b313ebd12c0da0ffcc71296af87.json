{"ast":null,"code":"import { config, forkJoin } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./pyramid-viewer/pyramid-viewer.component\";\nclass AppComponent {\n  constructor(http) {\n    this.http = http;\n    this.title = \"wrap-app\";\n  }\n  ngOnInit() {\n    const searchParams = new URLSearchParams(window.location.search.toLowerCase());\n    const plateUrlSearchParam = searchParams.get(\"imageUrl\".toLowerCase());\n    const plateUrl = plateUrlSearchParam === null ? config.plateUrl : plateUrlSearchParam;\n    const overlayUrlSearchParam = searchParams.get(\"overlayUrl\".toLowerCase());\n    const overlayUrl = overlayUrlSearchParam === null ? config.overlayUrl : overlayUrlSearchParam;\n    const plateSpacingXSearchParam = searchParams.get(\"imageSpacingX\".toLowerCase());\n    const plateSpacingX = plateSpacingXSearchParam === null ? 100000 : Number(plateSpacingXSearchParam);\n    const plateSpacingYSearchParam = searchParams.get(\"imageSpacingY\".toLowerCase());\n    const plateSpacingY = plateSpacingYSearchParam === null ? 100000 : Number(plateSpacingYSearchParam);\n    const numberOfPlatesSearchParam = searchParams.get(\"numberOfImages\".toLowerCase());\n    const numberOfPlates = numberOfPlatesSearchParam === null ? 200 : Number(numberOfPlatesSearchParam);\n    const platesToShowSearchParam = searchParams.get(\"imagesToShow\".toLowerCase());\n    const platesToShow = platesToShowSearchParam === null ? null : JSON.parse(platesToShowSearchParam);\n    const platesPerRowSearchParam = searchParams.get(\"imagesPerRow\".toLowerCase());\n    const platesPerRow = platesPerRowSearchParam === null ? 20 : Number(platesPerRowSearchParam);\n    const overlayUrl$ = this.http.get(overlayUrl);\n    forkJoin([overlayUrl$]).subscribe(([overlayData]) => {\n      this.imageUrls = [plateUrl]; /*platesToShow === null ?\n                                   imageData\n                                   .slice(0, numberOfPlates)\n                                   .map((item: { name: string }) => plateUrl + item.name) :\n                                   platesToShow.map((item: number)=>plateUrl + imageData[item].name);*/\n      //Needs the file process overlay data: Is below needed?\n      // const processedData = processOverlayData({\n      //   overlayData: platesToShow === null ?\n      //     overlayData.slice(0, numberOfPlates) :\n      //     platesToShow.map((item: any, index: number)=>overlayData[index]),\n      //   baseChemicalUrl: config.baseFormulaUrl,\n      //   cellSize: 3263,\n      //   plateSpacingX,\n      //   plateSpacingY,\n      //   platesPerRow,\n      //   wellsPerRow: 24,\n      //   wellsPerColumn: 16,\n      //   platesToShow\n      // });\n      this.overlayData = processedData;\n      this.heatmapIds = overlayData[0].gridCellLayers.map(d => ({\n        label: d.id,\n        value: d.id\n      })).concat({\n        label: \"None\",\n        value: null\n      });\n    });\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 1,\n  vars: 0,\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"app-pyramid-viewer\");\n    }\n  },\n  dependencies: [i2.PyramidViewerComponent],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { AppComponent };","map":{"version":3,"names":["config","forkJoin","AppComponent","constructor","http","title","ngOnInit","searchParams","URLSearchParams","window","location","search","toLowerCase","plateUrlSearchParam","get","plateUrl","overlayUrlSearchParam","overlayUrl","plateSpacingXSearchParam","plateSpacingX","Number","plateSpacingYSearchParam","plateSpacingY","numberOfPlatesSearchParam","numberOfPlates","platesToShowSearchParam","platesToShow","JSON","parse","platesPerRowSearchParam","platesPerRow","overlayUrl$","subscribe","overlayData","imageUrls","processedData","heatmapIds","gridCellLayers","map","d","label","id","value","concat","i0","ɵɵdirectiveInject","i1","HttpClient","selectors","decls","vars","template","AppComponent_Template","rf","ctx","ɵɵelement"],"sources":["/Users/akshat.saini/Documents/repo/wdzt-wrapper/src/app/app.component.ts","/Users/akshat.saini/Documents/repo/wdzt-wrapper/src/app/app.component.html"],"sourcesContent":["import { Component } from \"@angular/core\";\nimport { config, forkJoin, map } from \"rxjs\";\nimport { Pyramid } from \"./pyramid\";\nimport { HttpClient } from \"@angular/common/http\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  title = \"wrap-app\";\n  // manifest: any = null;\n  heatmapIds: { label: string; value: string }[] | undefined;\n  imageUrls: string[] | undefined;\n  overlayData: any;\n\n  constructor(private http: HttpClient) {}\n  ngOnInit(): void {\n    const searchParams = new URLSearchParams(\n      window.location.search.toLowerCase()\n    );\n\n    const plateUrlSearchParam = searchParams.get(\"imageUrl\".toLowerCase());\n    const plateUrl =\n      plateUrlSearchParam === null ? config.plateUrl : plateUrlSearchParam;\n    const overlayUrlSearchParam = searchParams.get(\"overlayUrl\".toLowerCase());\n    const overlayUrl =\n      overlayUrlSearchParam === null\n        ? config.overlayUrl\n        : overlayUrlSearchParam;\n\n    const plateSpacingXSearchParam = searchParams.get(\n      \"imageSpacingX\".toLowerCase()\n    );\n    const plateSpacingX =\n      plateSpacingXSearchParam === null\n        ? 100000\n        : Number(plateSpacingXSearchParam);\n    const plateSpacingYSearchParam = searchParams.get(\n      \"imageSpacingY\".toLowerCase()\n    );\n    const plateSpacingY =\n      plateSpacingYSearchParam === null\n        ? 100000\n        : Number(plateSpacingYSearchParam);\n\n    const numberOfPlatesSearchParam = searchParams.get(\n      \"numberOfImages\".toLowerCase()\n    );\n    const numberOfPlates =\n      numberOfPlatesSearchParam === null\n        ? 200\n        : Number(numberOfPlatesSearchParam);\n\n    const platesToShowSearchParam = searchParams.get(\n      \"imagesToShow\".toLowerCase()\n    );\n    const platesToShow =\n      platesToShowSearchParam === null\n        ? null\n        : JSON.parse(platesToShowSearchParam);\n\n    const platesPerRowSearchParam = searchParams.get(\n      \"imagesPerRow\".toLowerCase()\n    );\n    const platesPerRow =\n      platesPerRowSearchParam === null ? 20 : Number(platesPerRowSearchParam);\n\n    const overlayUrl$ = this.http.get(overlayUrl);\n    forkJoin([overlayUrl$]).subscribe(([overlayData]: [any]) => {\n      this.imageUrls = [plateUrl]; /*platesToShow === null ?\n          imageData\n            .slice(0, numberOfPlates)\n            .map((item: { name: string }) => plateUrl + item.name) :\n          platesToShow.map((item: number)=>plateUrl + imageData[item].name);*/\n\n      //Needs the file process overlay data: Is below needed?\n\n      // const processedData = processOverlayData({\n      //   overlayData: platesToShow === null ?\n      //     overlayData.slice(0, numberOfPlates) :\n      //     platesToShow.map((item: any, index: number)=>overlayData[index]),\n      //   baseChemicalUrl: config.baseFormulaUrl,\n      //   cellSize: 3263,\n      //   plateSpacingX,\n      //   plateSpacingY,\n      //   platesPerRow,\n      //   wellsPerRow: 24,\n      //   wellsPerColumn: 16,\n      //   platesToShow\n      // });\n      this.overlayData = processedData;\n      this.heatmapIds = overlayData[0].gridCellLayers\n        .map((d: any) => ({ label: d.id, value: d.id }))\n        .concat({ label: \"None\", value: null });\n    });\n  }\n}\n","<app-pyramid-viewer></app-pyramid-viewer>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}